
export declare namespace Flowplayer {
  export type SourceStr =
    | string
  export type SourceObj =
    | {src: SourceStr, type?: string, drm?: DRMLicenseInfo}
  export type UnsafeSource =
    | SourceStr
    | SourceStr[]
    | SourceObj
    | SourceList
  export type SourceList =
    | Array<SourceObj>
  export type DRMLicenseServer =
    { server_url: string
    }
  export type DRMLicenseInfo = 
    { "com.microsoft.playready": DRMLicenseServer
    ; "com.widevine.alpha": DRMLicenseServer
    }
  type PlayerState =
    | string
  export type BitOpts =
    | number
  export interface FPEvent<T> extends Event {
    data? : T;
  }
  export interface Config {
    src? : UnsafeSource
    preload? : "none" | "metadata" | "auto"
    controls?: boolean
    start_time?: number
    autoplay?: BitOpts
    ui?: BitOpts
    token?: string
  }

  export type CustomConfig<T> = 
    | Config & T
  export type PluginConfig<T> =
    Config & T
  export interface Plugin<T> {
    // plugin
    (config : PluginConfig<T>, root : PlayerRoot, video : Player): void;
    // loader
    (config : PluginConfig<T>, root : PlayerRoot, video : Player, src : SourceObj): void;
    // lifecycle hook for the top-level onumd callback
    onumd? : OnUMD;
    // lifecycle hooks for the top-level onapi callback
    onapi? : OnAPI;
  }
  export interface OnUMD {
    (umd : FlowplayerUMD): void;
  }
  export interface OnAPI {
    (umd : Player): void;
  }
  export interface Observable {
    emit<A> (event: string, data? : A): this;
    on<A> (event: string, cb: (e: FPEvent<A>)=> void): this;
    on<A> (event: string[], cb: (e: FPEvent<A>) => void): this;
    off<A> (event: string, cb : (e: FPEvent<A>)=> void): this;
  }
  export type PlayerRoot =
    | Observable & HTMLElement;
  export interface Player extends Observable, HTMLVideoElement {
    original_src : string;
    root         : PlayerRoot;
    playerState  : Record<string, boolean>;
    hasState (state : PlayerState): boolean;
    transitionState (to : PlayerState, from : PlayerState, timer? : number): void;
    togglePlay(on? : boolean): Promise<void>;
    toggleMute(on? : boolean): void;
    destroy (): void;
    render (): void;
    render (component : string, args : any[]): void;
    setOpts (config : Config): void;
    setSrc (sources: UnsafeSource): Player;
    opt<T> (key : string, fallback? : T): T;
    setAttrs (attrs: Record<string, any>): void;
    opts: Config;
    hls?: any;
  }
  export interface FlowplayerUMD {
    (selector : string, config? : Config): Player;
    <T>(selector : string, config? : CustomConfig<T>): Player;
    (element  : HTMLElement, config? : Config): Player;
    <T>(element  : HTMLElement, config? : CustomConfig<T>): Player;
    (...plugins : Plugin<Config>[]): void;
    <T>(...plugins : Plugin<CustomConfig<T>>[]): void;
    <T>(plugin: Plugin<T>): void;
    instances: Player[];
    extensions: Plugin<Config>[];
    events: Record<string, string>;
  }
}
export const flowplayer: Flowplayer.FlowplayerUMD;
export default flowplayer;
export type Player = Flowplayer.Player;
export type Plugin<T> = Flowplayer.Plugin<T>;
export type UnsafeSource = Flowplayer.UnsafeSource;
export type SourceList = Flowplayer.SourceList;
export type SourceObj = Flowplayer.SourceObj;
export type SourceStr = Flowplayer.SourceStr;
export type Config = Flowplayer.Config;
export type PluginConfig<T> = Flowplayer.PluginConfig<T>;
export type FPEvent<T> = Flowplayer.FPEvent<T>;